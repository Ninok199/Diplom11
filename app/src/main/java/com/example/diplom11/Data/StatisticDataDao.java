package com.example.diplom11.Data;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "statistic".
*/
public class StatisticDataDao extends AbstractDao<StatisticData, Long> {

    public static final String TABLENAME = "statistic";

    /**
     * Properties of entity StatisticData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id_statistics = new Property(0, long.class, "_id_statistics", true, "_id");
        public final static Property _idWord = new Property(1, long.class, "_idWord", false, "_id_word");
        public final static Property CorrectAnswer = new Property(2, int.class, "correctAnswer", false, "correct_answer");
        public final static Property DateAnswer = new Property(3, String.class, "dateAnswer", false, "date_answer");
    }


    public StatisticDataDao(DaoConfig config) {
        super(config);
    }
    
    public StatisticDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"statistic\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: _id_statistics
                "\"_id_word\" INTEGER NOT NULL ," + // 1: _idWord
                "\"correct_answer\" INTEGER NOT NULL ," + // 2: correctAnswer
                "\"date_answer\" TEXT);"); // 3: dateAnswer
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"statistic\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StatisticData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.get_id_statistics());
        stmt.bindLong(2, entity.get_idWord());
        stmt.bindLong(3, entity.getCorrectAnswer());
 
        String dateAnswer = entity.getDateAnswer();
        if (dateAnswer != null) {
            stmt.bindString(4, dateAnswer);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StatisticData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.get_id_statistics());
        stmt.bindLong(2, entity.get_idWord());
        stmt.bindLong(3, entity.getCorrectAnswer());
 
        String dateAnswer = entity.getDateAnswer();
        if (dateAnswer != null) {
            stmt.bindString(4, dateAnswer);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public StatisticData readEntity(Cursor cursor, int offset) {
        StatisticData entity = new StatisticData( //
            cursor.getLong(offset + 0), // _id_statistics
            cursor.getLong(offset + 1), // _idWord
            cursor.getInt(offset + 2), // correctAnswer
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // dateAnswer
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StatisticData entity, int offset) {
        entity.set_id_statistics(cursor.getLong(offset + 0));
        entity.set_idWord(cursor.getLong(offset + 1));
        entity.setCorrectAnswer(cursor.getInt(offset + 2));
        entity.setDateAnswer(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StatisticData entity, long rowId) {
        entity.set_id_statistics(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StatisticData entity) {
        if(entity != null) {
            return entity.get_id_statistics();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StatisticData entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
